// <auto-generated />
namespace FsUniversityApi.Migrations

open System
open FsUniversityApi.Database
open Microsoft.EntityFrameworkCore
open Microsoft.EntityFrameworkCore.Infrastructure
open Microsoft.EntityFrameworkCore.Metadata
open Microsoft.EntityFrameworkCore.Migrations
open Microsoft.EntityFrameworkCore.Storage.ValueConversion

[<DbContext(typeof<FsDbContext.FsDbContext>)>]
[<Migration("20230724114243_pending")>]
type pending() =
    inherit Migration()

    override this.Up(migrationBuilder:MigrationBuilder) =
        migrationBuilder.CreateTable(
            name = "Courses"
            ,columns = (fun table -> 
            {|
                CourseId =
                    table.Column<Guid>(
                        nullable = false
                        ,``type`` = "uniqueidentifier"
                    )
                CourseCode =
                    table.Column<string>(
                        nullable = false
                        ,``type`` = "nvarchar(max)"
                    )
                CourseName =
                    table.Column<string>(
                        nullable = false
                        ,``type`` = "nvarchar(max)"
                    )
                ECTS =
                    table.Column<int>(
                        nullable = false
                        ,``type`` = "int"
                    )
                IsFinishedWithExam =
                    table.Column<bool>(
                        nullable = false
                        ,``type`` = "bit"
                    )
                SoftDeleted =
                    table.Column<bool>(
                        nullable = false
                        ,``type`` = "bit"
                    )
            |})
            , constraints =
                (fun table -> 
                    table.PrimaryKey("PK_Courses", (fun x -> (x.CourseId) :> obj)
                    ) |> ignore
                )
        ) |> ignore

        migrationBuilder.CreateTable(
            name = "People"
            ,columns = (fun table -> 
            {|
                PersonInfoId =
                    table.Column<Guid>(
                        nullable = false
                        ,``type`` = "uniqueidentifier"
                    )
                ApplicationUserId =
                    table.Column<Guid>(
                        nullable = false
                        ,``type`` = "uniqueidentifier"
                    )
                FirstName =
                    table.Column<string>(
                        nullable = false
                        ,``type`` = "nvarchar(max)"
                    )
                LastName =
                    table.Column<string>(
                        nullable = false
                        ,``type`` = "nvarchar(max)"
                    )
                PESEL =
                    table.Column<string>(
                        nullable = false
                        ,``type`` = "nvarchar(max)"
                    )
                Birthday =
                    table.Column<DateTime>(
                        nullable = false
                        ,``type`` = "datetime2"
                    )
                MotherLand =
                    table.Column<string>(
                        nullable = false
                        ,``type`` = "nvarchar(max)"
                    )
                PersonStatus =
                    table.Column<int>(
                        nullable = false
                        ,``type`` = "int"
                    )
                SoftDeleted =
                    table.Column<bool>(
                        nullable = false
                        ,``type`` = "bit"
                    )
            |})
            , constraints =
                (fun table -> 
                    table.PrimaryKey("PK_People", (fun x -> (x.PersonInfoId) :> obj)
                    ) |> ignore
                )
        ) |> ignore

        migrationBuilder.CreateTable(
            name = "Professors"
            ,columns = (fun table -> 
            {|
                PersonInfoId =
                    table.Column<Guid>(
                        nullable = false
                        ,``type`` = "uniqueidentifier"
                    )
                IdCode =
                    table.Column<string>(
                        nullable = false
                        ,``type`` = "nvarchar(max)"
                    )
                Subject =
                    table.Column<string>(
                        nullable = false
                        ,``type`` = "nvarchar(max)"
                    )
                FirstDayAtJob =
                    table.Column<DateTime>(
                        nullable = false
                        ,``type`` = "datetime2"
                    )
                Salary =
                    table.Column<int>(
                        nullable = false
                        ,``type`` = "int"
                    )
            |})
            , constraints =
                (fun table -> 
                    table.PrimaryKey("PK_Professors", (fun x -> (x.PersonInfoId) :> obj)
                    ) |> ignore
                    table.ForeignKey(
                        name = "FK_Professors_People_PersonInfoId"
                        ,column = (fun x -> (x.PersonInfoId) :> obj)
                        ,principalTable = "People"
                        ,principalColumn = "PersonInfoId"
                        ,onDelete = ReferentialAction.Cascade
                        ) |> ignore

                )
        ) |> ignore

        migrationBuilder.CreateTable(
            name = "Students"
            ,columns = (fun table -> 
            {|
                PersonInfoId =
                    table.Column<Guid>(
                        nullable = false
                        ,``type`` = "uniqueidentifier"
                    )
                Index =
                    table.Column<string>(
                        nullable = false
                        ,``type`` = "nvarchar(max)"
                    )
                BeginningOfStudying =
                    table.Column<DateTime>(
                        nullable = false
                        ,``type`` = "datetime2"
                    )
            |})
            , constraints =
                (fun table -> 
                    table.PrimaryKey("PK_Students", (fun x -> (x.PersonInfoId) :> obj)
                    ) |> ignore
                    table.ForeignKey(
                        name = "FK_Students_People_PersonInfoId"
                        ,column = (fun x -> (x.PersonInfoId) :> obj)
                        ,principalTable = "People"
                        ,principalColumn = "PersonInfoId"
                        ,onDelete = ReferentialAction.Cascade
                        ) |> ignore

                )
        ) |> ignore

        migrationBuilder.CreateTable(
            name = "CourseStudent"
            ,columns = (fun table -> 
            {|
                CoursesCourseId =
                    table.Column<Guid>(
                        nullable = false
                        ,``type`` = "uniqueidentifier"
                    )
                StudentsPersonInfoId =
                    table.Column<Guid>(
                        nullable = false
                        ,``type`` = "uniqueidentifier"
                    )
            |})
            , constraints =
                (fun table -> 
                    table.PrimaryKey("PK_CourseStudent", (fun x -> (x.CoursesCourseId, x.StudentsPersonInfoId) :> obj)
                    ) |> ignore
                    table.ForeignKey(
                        name = "FK_CourseStudent_Courses_CoursesCourseId"
                        ,column = (fun x -> (x.CoursesCourseId) :> obj)
                        ,principalTable = "Courses"
                        ,principalColumn = "CourseId"
                        ,onDelete = ReferentialAction.Cascade
                        ) |> ignore

                    table.ForeignKey(
                        name = "FK_CourseStudent_Students_StudentsPersonInfoId"
                        ,column = (fun x -> (x.StudentsPersonInfoId) :> obj)
                        ,principalTable = "Students"
                        ,principalColumn = "PersonInfoId"
                        ,onDelete = ReferentialAction.Cascade
                        ) |> ignore

                )
        ) |> ignore

        migrationBuilder.CreateIndex(
            name = "IX_CourseStudent_StudentsPersonInfoId"
            ,table = "CourseStudent"
            ,column = "StudentsPersonInfoId"
            ) |> ignore


    override this.Down(migrationBuilder:MigrationBuilder) =
        migrationBuilder.DropTable(
            name = "CourseStudent"
            ) |> ignore

        migrationBuilder.DropTable(
            name = "Professors"
            ) |> ignore

        migrationBuilder.DropTable(
            name = "Courses"
            ) |> ignore

        migrationBuilder.DropTable(
            name = "Students"
            ) |> ignore

        migrationBuilder.DropTable(
            name = "People"
            ) |> ignore


    override this.BuildTargetModel(modelBuilder: ModelBuilder) =
        modelBuilder
            .HasAnnotation("ProductVersion", "6.0.7")
            .HasAnnotation("Relational:MaxIdentifierLength", 128) |> ignore

        modelBuilder.Entity("CourseStudent", (fun b ->

            b.Property<Guid>("CoursesCourseId")
                .IsRequired(true)
                .HasColumnType("uniqueidentifier")
                |> ignore

            b.Property<Guid>("StudentsPersonInfoId")
                .IsRequired(true)
                .HasColumnType("uniqueidentifier")
                |> ignore

            b.HasKey("CoursesCourseId", "StudentsPersonInfoId")
                |> ignore


            b.HasIndex("StudentsPersonInfoId")
                |> ignore

            b.ToTable("CourseStudent") |> ignore

        )) |> ignore

        modelBuilder.Entity("FsUniversityApi.Database.Entities.Person+PersonInfo", (fun b ->

            b.Property<Guid>("PersonInfoId")
                .IsRequired(true)
                .ValueGeneratedOnAdd()
                .HasColumnType("uniqueidentifier")
                |> ignore

            b.Property<Guid>("ApplicationUserId")
                .IsRequired(true)
                .HasColumnType("uniqueidentifier")
                |> ignore

            b.Property<DateTime>("Birthday")
                .IsRequired(true)
                .HasColumnType("datetime2")
                |> ignore

            b.Property<string>("FirstName")
                .IsRequired(true)
                .HasColumnType("nvarchar(max)")
                |> ignore

            b.Property<string>("LastName")
                .IsRequired(true)
                .HasColumnType("nvarchar(max)")
                |> ignore

            b.Property<string>("MotherLand")
                .IsRequired(true)
                .HasColumnType("nvarchar(max)")
                |> ignore

            b.Property<string>("PESEL")
                .IsRequired(true)
                .HasColumnType("nvarchar(max)")
                |> ignore

            b.Property<int>("PersonStatus")
                .IsRequired(true)
                .HasColumnType("int")
                |> ignore

            b.Property<bool>("SoftDeleted")
                .IsRequired(true)
                .HasColumnType("bit")
                |> ignore

            b.HasKey("PersonInfoId")
                |> ignore


            b.ToTable("People") |> ignore

        )) |> ignore

        modelBuilder.Entity("FsUniversityApi.Database.Entities.Professor+Professor", (fun b ->

            b.Property<Guid>("PersonInfoId")
                .IsRequired(true)
                .HasColumnType("uniqueidentifier")
                |> ignore

            b.Property<DateTime>("FirstDayAtJob")
                .IsRequired(true)
                .HasColumnType("datetime2")
                |> ignore

            b.Property<string>("IdCode")
                .IsRequired(true)
                .HasColumnType("nvarchar(max)")
                |> ignore

            b.Property<int>("Salary")
                .IsRequired(true)
                .HasColumnType("int")
                |> ignore

            b.Property<string>("Subject")
                .IsRequired(true)
                .HasColumnType("nvarchar(max)")
                |> ignore

            b.HasKey("PersonInfoId")
                |> ignore


            b.ToTable("Professors") |> ignore

        )) |> ignore

        modelBuilder.Entity("FsUniversityApi.Database.Entities.StudentAndCourse+Course", (fun b ->

            b.Property<Guid>("CourseId")
                .IsRequired(true)
                .ValueGeneratedOnAdd()
                .HasColumnType("uniqueidentifier")
                |> ignore

            b.Property<string>("CourseCode")
                .IsRequired(true)
                .HasColumnType("nvarchar(max)")
                |> ignore

            b.Property<string>("CourseName")
                .IsRequired(true)
                .HasColumnType("nvarchar(max)")
                |> ignore

            b.Property<int>("ECTS")
                .IsRequired(true)
                .HasColumnType("int")
                |> ignore

            b.Property<bool>("IsFinishedWithExam")
                .IsRequired(true)
                .HasColumnType("bit")
                |> ignore

            b.Property<bool>("SoftDeleted")
                .IsRequired(true)
                .HasColumnType("bit")
                |> ignore

            b.HasKey("CourseId")
                |> ignore


            b.ToTable("Courses") |> ignore

        )) |> ignore

        modelBuilder.Entity("FsUniversityApi.Database.Entities.StudentAndCourse+Student", (fun b ->

            b.Property<Guid>("PersonInfoId")
                .IsRequired(true)
                .HasColumnType("uniqueidentifier")
                |> ignore

            b.Property<DateTime>("BeginningOfStudying")
                .IsRequired(true)
                .HasColumnType("datetime2")
                |> ignore

            b.Property<string>("Index")
                .IsRequired(true)
                .HasColumnType("nvarchar(max)")
                |> ignore

            b.HasKey("PersonInfoId")
                |> ignore


            b.ToTable("Students") |> ignore

        )) |> ignore
        modelBuilder.Entity("CourseStudent", (fun b ->
            b.HasOne("FsUniversityApi.Database.Entities.StudentAndCourse+Course", null)
                .WithMany()
                .HasForeignKey("CoursesCourseId")
                .OnDelete(DeleteBehavior.Cascade)
                .IsRequired()
                |> ignore
            b.HasOne("FsUniversityApi.Database.Entities.StudentAndCourse+Student", null)
                .WithMany()
                .HasForeignKey("StudentsPersonInfoId")
                .OnDelete(DeleteBehavior.Cascade)
                .IsRequired()
                |> ignore

        )) |> ignore
        modelBuilder.Entity("FsUniversityApi.Database.Entities.Professor+Professor", (fun b ->
            b.HasOne("FsUniversityApi.Database.Entities.Person+PersonInfo", "PersonInfo")
                .WithOne()
                .HasForeignKey("FsUniversityApi.Database.Entities.Professor+Professor", "PersonInfoId")
                .OnDelete(DeleteBehavior.Cascade)
                .IsRequired()
                |> ignore

        )) |> ignore
        modelBuilder.Entity("FsUniversityApi.Database.Entities.StudentAndCourse+Student", (fun b ->
            b.HasOne("FsUniversityApi.Database.Entities.Person+PersonInfo", "PersonInfo")
                .WithOne()
                .HasForeignKey("FsUniversityApi.Database.Entities.StudentAndCourse+Student", "PersonInfoId")
                .OnDelete(DeleteBehavior.Cascade)
                .IsRequired()
                |> ignore

        )) |> ignore

