// <auto-generated/>
#nullable enable

namespace ConsoleApp1
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.21.0.0")]
    public partial class GetAllPeopleResult : global::System.IEquatable<GetAllPeopleResult>, IGetAllPeopleResult
    {
        public GetAllPeopleResult(global::System.Collections.Generic.IReadOnlyList<global::ConsoleApp1.IGetAllPeople_People?>? people)
        {
            People = people;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::ConsoleApp1.IGetAllPeople_People?>? People { get; }

        public virtual global::System.Boolean Equals(GetAllPeopleResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(People, other.People));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetAllPeopleResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (People != null)
                {
                    foreach (var People_elm in People)
                    {
                        if (People_elm != null)
                        {
                            hash ^= 397 * People_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.21.0.0")]
    public partial class GetAllPeople_People_EntityPerson : global::System.IEquatable<GetAllPeople_People_EntityPerson>, IGetAllPeople_People_EntityPerson
    {
        public GetAllPeople_People_EntityPerson(global::System.Guid id, global::System.Guid userId, global::System.String? firstName, global::System.String? lastName, global::System.String? pESEL, global::System.DateTimeOffset birthday, global::System.String? motherland, global::ConsoleApp1.PersonStatus personStatus)
        {
            Id = id;
            UserId = userId;
            FirstName = firstName;
            LastName = lastName;
            PESEL = pESEL;
            Birthday = birthday;
            Motherland = motherland;
            PersonStatus = personStatus;
        }

        public global::System.Guid Id { get; }
        public global::System.Guid UserId { get; }
        public global::System.String? FirstName { get; }
        public global::System.String? LastName { get; }
        public global::System.String? PESEL { get; }
        public global::System.DateTimeOffset Birthday { get; }
        public global::System.String? Motherland { get; }
        public global::ConsoleApp1.PersonStatus PersonStatus { get; }

        public virtual global::System.Boolean Equals(GetAllPeople_People_EntityPerson? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && UserId.Equals(other.UserId) && ((FirstName is null && other.FirstName is null) || FirstName != null && FirstName.Equals(other.FirstName)) && ((LastName is null && other.LastName is null) || LastName != null && LastName.Equals(other.LastName)) && ((PESEL is null && other.PESEL is null) || PESEL != null && PESEL.Equals(other.PESEL)) && Birthday.Equals(other.Birthday) && ((Motherland is null && other.Motherland is null) || Motherland != null && Motherland.Equals(other.Motherland)) && PersonStatus.Equals(other.PersonStatus);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetAllPeople_People_EntityPerson)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * UserId.GetHashCode();
                if (FirstName != null)
                {
                    hash ^= 397 * FirstName.GetHashCode();
                }

                if (LastName != null)
                {
                    hash ^= 397 * LastName.GetHashCode();
                }

                if (PESEL != null)
                {
                    hash ^= 397 * PESEL.GetHashCode();
                }

                hash ^= 397 * Birthday.GetHashCode();
                if (Motherland != null)
                {
                    hash ^= 397 * Motherland.GetHashCode();
                }

                hash ^= 397 * PersonStatus.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.21.0.0")]
    public partial interface IGetAllPeopleResult
    {
        public global::System.Collections.Generic.IReadOnlyList<global::ConsoleApp1.IGetAllPeople_People?>? People { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.21.0.0")]
    public partial interface IGetAllPeople_People
    {
        public global::System.Guid Id { get; }
        public global::System.Guid UserId { get; }
        public global::System.String? FirstName { get; }
        public global::System.String? LastName { get; }
        public global::System.String? PESEL { get; }
        public global::System.DateTimeOffset Birthday { get; }
        public global::System.String? Motherland { get; }
        public global::ConsoleApp1.PersonStatus PersonStatus { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.21.0.0")]
    public partial interface IGetAllPeople_People_EntityPerson : IGetAllPeople_People
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.21.0.0")]
    public enum PersonStatus
    {
        Unidentified,
        Student,
        Professor,
        Admin
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.21.0.0")]
    public partial class PersonStatusSerializer : global::StrawberryShake.Serialization.IInputValueFormatter, global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, PersonStatus>
    {
        public global::System.String TypeName => "PersonStatus";

        public PersonStatus Parse(global::System.String serializedValue)
        {
            return serializedValue switch
            {
                "UNIDENTIFIED" => PersonStatus.Unidentified,
                "STUDENT" => PersonStatus.Student,
                "PROFESSOR" => PersonStatus.Professor,
                "ADMIN" => PersonStatus.Admin,
                _ => throw new global::StrawberryShake.GraphQLClientException()};
        }

        public global::System.Object Format(global::System.Object? runtimeValue)
        {
            return runtimeValue switch
            {
                PersonStatus.Unidentified => "UNIDENTIFIED",
                PersonStatus.Student => "STUDENT",
                PersonStatus.Professor => "PROFESSOR",
                PersonStatus.Admin => "ADMIN",
                _ => throw new global::StrawberryShake.GraphQLClientException()};
        }
    }

    /// <summary>
    /// Represents the operation service of the GetAllPeople GraphQL operation
    /// <code>
    /// query GetAllPeople {
    ///   people {
    ///     __typename
    ///     Id
    ///     UserId
    ///     FirstName
    ///     LastName
    ///     PESEL
    ///     Birthday
    ///     Motherland
    ///     PersonStatus
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.21.0.0")]
    public partial class GetAllPeopleQueryDocument : global::StrawberryShake.IDocument
    {
        private GetAllPeopleQueryDocument()
        {
        }

        public static GetAllPeopleQueryDocument Instance { get; } = new GetAllPeopleQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x71,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x47,
            0x65,
            0x74,
            0x41,
            0x6c,
            0x6c,
            0x50,
            0x65,
            0x6f,
            0x70,
            0x6c,
            0x65,
            0x20,
            0x7b,
            0x20,
            0x70,
            0x65,
            0x6f,
            0x70,
            0x6c,
            0x65,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x49,
            0x64,
            0x20,
            0x55,
            0x73,
            0x65,
            0x72,
            0x49,
            0x64,
            0x20,
            0x46,
            0x69,
            0x72,
            0x73,
            0x74,
            0x4e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x4c,
            0x61,
            0x73,
            0x74,
            0x4e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x50,
            0x45,
            0x53,
            0x45,
            0x4c,
            0x20,
            0x42,
            0x69,
            0x72,
            0x74,
            0x68,
            0x64,
            0x61,
            0x79,
            0x20,
            0x4d,
            0x6f,
            0x74,
            0x68,
            0x65,
            0x72,
            0x6c,
            0x61,
            0x6e,
            0x64,
            0x20,
            0x50,
            0x65,
            0x72,
            0x73,
            0x6f,
            0x6e,
            0x53,
            0x74,
            0x61,
            0x74,
            0x75,
            0x73,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "1368766b5dc3b9b28e4e60c6307132f0");

        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetAllPeople GraphQL operation
    /// <code>
    /// query GetAllPeople {
    ///   people {
    ///     __typename
    ///     Id
    ///     UserId
    ///     FirstName
    ///     LastName
    ///     PESEL
    ///     Birthday
    ///     Motherland
    ///     PersonStatus
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.21.0.0")]
    public partial class GetAllPeopleQuery : global::ConsoleApp1.IGetAllPeopleQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetAllPeopleResult> _operationExecutor;
        public GetAllPeopleQuery(global::StrawberryShake.IOperationExecutor<IGetAllPeopleResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetAllPeopleResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetAllPeopleResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetAllPeopleResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetAllPeopleQueryDocument.Instance.Hash.Value, name: "GetAllPeople", document: GetAllPeopleQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the GetAllPeople GraphQL operation
    /// <code>
    /// query GetAllPeople {
    ///   people {
    ///     __typename
    ///     Id
    ///     UserId
    ///     FirstName
    ///     LastName
    ///     PESEL
    ///     Birthday
    ///     Motherland
    ///     PersonStatus
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.21.0.0")]
    public partial interface IGetAllPeopleQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetAllPeopleResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetAllPeopleResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the ConsoleApp1 GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.21.0.0")]
    public partial class ConsoleApp1 : global::ConsoleApp1.IConsoleApp1
    {
        private readonly global::ConsoleApp1.IGetAllPeopleQuery _getAllPeople;
        public ConsoleApp1(global::ConsoleApp1.IGetAllPeopleQuery getAllPeople)
        {
            _getAllPeople = getAllPeople ?? throw new global::System.ArgumentNullException(nameof(getAllPeople));
        }

        public static global::System.String ClientName => "ConsoleApp1";
        public global::ConsoleApp1.IGetAllPeopleQuery GetAllPeople => _getAllPeople;
    }

    /// <summary>
    /// Represents the ConsoleApp1 GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.21.0.0")]
    public partial interface IConsoleApp1
    {
        global::ConsoleApp1.IGetAllPeopleQuery GetAllPeople { get; }
    }
}

namespace ConsoleApp1.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.21.0.0")]
    public partial class GetAllPeopleResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::ConsoleApp1.GetAllPeopleResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetAllPeopleResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::ConsoleApp1.IGetAllPeopleResult);

        public GetAllPeopleResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetAllPeopleResultInfo info)
            {
                return new GetAllPeopleResult(MapIGetAllPeople_PeopleArray(info.People, snapshot));
            }

            throw new global::System.ArgumentException("GetAllPeopleResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::ConsoleApp1.IGetAllPeople_People?>? MapIGetAllPeople_PeopleArray(global::System.Collections.Generic.IReadOnlyList<global::ConsoleApp1.State.EntityPersonData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var entityPersons = new global::System.Collections.Generic.List<global::ConsoleApp1.IGetAllPeople_People?>();
            foreach (global::ConsoleApp1.State.EntityPersonData? child in list)
            {
                entityPersons.Add(MapIGetAllPeople_People(child, snapshot));
            }

            return entityPersons;
        }

        private global::ConsoleApp1.IGetAllPeople_People? MapIGetAllPeople_People(global::ConsoleApp1.State.EntityPersonData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetAllPeople_People returnValue = default !;
            if (data?.__typename.Equals("EntityPerson", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetAllPeople_People_EntityPerson(data.Id ?? throw new global::System.ArgumentNullException(), data.UserId ?? throw new global::System.ArgumentNullException(), data.FirstName, data.LastName, data.PESEL, data.Birthday ?? throw new global::System.ArgumentNullException(), data.Motherland, data.PersonStatus ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.21.0.0")]
    public partial class GetAllPeopleResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetAllPeopleResultInfo(global::System.Collections.Generic.IReadOnlyList<global::ConsoleApp1.State.EntityPersonData?>? people, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            People = people;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::ConsoleApp1.State.EntityPersonData?>? People { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetAllPeopleResultInfo(People, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.21.0.0")]
    public partial class GetAllPeopleBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::ConsoleApp1.IGetAllPeopleResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::ConsoleApp1.IGetAllPeopleResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::ConsoleApp1.PersonStatus> _personStatusParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.Guid> _uUIDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        public GetAllPeopleBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::ConsoleApp1.IGetAllPeopleResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _personStatusParser = serializerResolver.GetLeafValueParser<global::System.String, global::ConsoleApp1.PersonStatus>("PersonStatus") ?? throw new global::System.ArgumentException("No serializer for type `PersonStatus` found.");
            _uUIDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.Guid>("UUID") ?? throw new global::System.ArgumentException("No serializer for type `UUID` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetAllPeopleResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetAllPeopleResult Result, GetAllPeopleResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]
                    {
                        new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?> { { "body", response.Body?.RootElement.ToString() } })
                    };
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]
                    {
                        new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?> { { "body", response.Body?.RootElement.ToString() } })
                    };
                }
            }

            return new global::StrawberryShake.OperationResult<IGetAllPeopleResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetAllPeopleResult, GetAllPeopleResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetAllPeopleResultInfo(DeserializeIGetAllPeople_PeopleArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "people")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::ConsoleApp1.State.EntityPersonData?>? DeserializeIGetAllPeople_PeopleArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var entityPersons = new global::System.Collections.Generic.List<global::ConsoleApp1.State.EntityPersonData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                entityPersons.Add(DeserializeIGetAllPeople_People(child));
            }

            return entityPersons;
        }

        private global::ConsoleApp1.State.EntityPersonData? DeserializeIGetAllPeople_People(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("EntityPerson", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::ConsoleApp1.State.EntityPersonData(typename, id: DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "Id")), userId: DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "UserId")), firstName: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "FirstName")), lastName: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "LastName")), pESEL: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "PESEL")), birthday: DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "Birthday")), motherland: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "Motherland")), personStatus: DeserializeNonNullablePersonStatus(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "PersonStatus")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid DeserializeNonNullableGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uUIDParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.DateTimeOffset DeserializeNonNullableDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }

        private global::ConsoleApp1.PersonStatus DeserializeNonNullablePersonStatus(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _personStatusParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.21.0.0")]
    public partial class EntityPersonData
    {
        public EntityPersonData(global::System.String __typename, global::System.Guid? id = default !, global::System.Guid? userId = default !, global::System.String? firstName = default !, global::System.String? lastName = default !, global::System.String? pESEL = default !, global::System.DateTimeOffset? birthday = default !, global::System.String? motherland = default !, global::ConsoleApp1.PersonStatus? personStatus = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Id = id;
            UserId = userId;
            FirstName = firstName;
            LastName = lastName;
            PESEL = pESEL;
            Birthday = birthday;
            Motherland = motherland;
            PersonStatus = personStatus;
        }

        public global::System.String __typename { get; }
        public global::System.Guid? Id { get; }
        public global::System.Guid? UserId { get; }
        public global::System.String? FirstName { get; }
        public global::System.String? LastName { get; }
        public global::System.String? PESEL { get; }
        public global::System.DateTimeOffset? Birthday { get; }
        public global::System.String? Motherland { get; }
        public global::ConsoleApp1.PersonStatus? PersonStatus { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.21.0.0")]
    public partial class ConsoleApp1EntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {
            Indented = false
        };
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
                _ => throw new global::System.NotSupportedException()};
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
                _ => throw new global::System.NotSupportedException()};
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.21.0.0")]
    public partial class ConsoleApp1StoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public ConsoleApp1StoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories) : base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.21.0.0")]
    public static partial class ConsoleApp1ServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::ConsoleApp1.State.ConsoleApp1StoreAccessor> AddConsoleApp1(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClientDefault(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::ConsoleApp1.State.ConsoleApp1StoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ConsoleApp1.GetAllPeopleQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ConsoleApp1.ConsoleApp1>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ConsoleApp1.IConsoleApp1>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::ConsoleApp1.State.ConsoleApp1StoreAccessor>("ConsoleApp1", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClientDefault(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("ConsoleApp1"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::ConsoleApp1.PersonStatusSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::ConsoleApp1.IGetAllPeopleResult>, global::ConsoleApp1.State.GetAllPeopleResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::ConsoleApp1.IGetAllPeopleResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ConsoleApp1.IGetAllPeopleQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::ConsoleApp1.IGetAllPeopleResult>, global::ConsoleApp1.State.GetAllPeopleBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::ConsoleApp1.IGetAllPeopleResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::ConsoleApp1.IGetAllPeopleResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::ConsoleApp1.IGetAllPeopleResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::ConsoleApp1.GetAllPeopleQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::ConsoleApp1.IGetAllPeopleQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ConsoleApp1.GetAllPeopleQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::ConsoleApp1.State.ConsoleApp1EntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::ConsoleApp1.ConsoleApp1>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::ConsoleApp1.IConsoleApp1>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ConsoleApp1.ConsoleApp1>(sp));
            return services;
        }

        private class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}
